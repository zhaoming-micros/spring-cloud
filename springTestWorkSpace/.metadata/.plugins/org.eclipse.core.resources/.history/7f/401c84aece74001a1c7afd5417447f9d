package com.chasepay.email;

import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


public class EmailFunction implements Runnable {
	
	static Logger logger = LogManager.getLogger(EmailFunction.class);
	
	private EmailPropertyObject propertyObject;
	private EmailObject emailObject;
	
	public EmailFunction(EmailObject emailObject)
	{
		this.emailObject = emailObject;
	} 
	
	public void run()
	{
		sendEmail();
	}
	
	public void sendEmail()
	{
		if(initEmail())
		{
			doSend();
		}else {
			logger.error("init email faled");
		}
	}
	
	private boolean initEmail()
	{
		propertyObject = EmailPropertyReader.getInstance().getEmailObject();
		
		if(propertyObject == null)
		{
			logger.error("propertyObject is null");
			return false;
		}
			
		
		String token = propertyObject.getToken();
		Util util = new Util();
		if(!util.isPasswdCorrect(EmailFunctionConstant.EMAIL_PSSWD.getBytes(), token))
		{
			logger.error("password is not correct");
			return false;
		}else
		{
			propertyObject.setPsswd(EmailFunctionConstant.EMAIL_PSSWD);
		}
			
		return true;		
	}

	public void setEmailObject(Map<String, String> inputs)
	{

		try {
			
			if(emailObject==null)
			{
				logger.error("null object in buildEmailContent");
				return;
			}
			
			return;

		} catch (Exception e) {
			logger.error("set email content mapping error : " + e.getMessage());
			return;
		}
	}
	
	private boolean doSend()
	{
		if(emailObject == null || propertyObject == null)
		{
			logger.error("null object in doSend()");
			return false;
		}
		
		Session session = getSenderSession();
		
        try 
        {  
        	StringBuilder sb = new StringBuilder();
        	
            Message message = new MimeMessage(session);   
            
            if(emailObject.getTo()!=null)
            {
            	sb.append("to [");
            	
            	InternetAddress[] toAddress = new InternetAddress[emailObject.getTo().size()];
                
                for( int i = 0; i < emailObject.getTo().size(); i++ ) {
                    toAddress[i] = new InternetAddress(emailObject.getTo().get(i));
                }
                
                for( int i = 0; i < toAddress.length; i++) {
                    message.addRecipient(Message.RecipientType.TO, toAddress[i]);
                    sb.append(toAddress[i] + ",");
                }
                
                sb.deleteCharAt(sb.length()-1);
                sb.append("],");
            }
            else
            {
            	sb.append("to [").append(propertyObject.getFrom()).append("],");
            	message.addRecipient(Message.RecipientType.TO, new InternetAddress(propertyObject.getFrom()));
            }

            if(emailObject.getCc()!=null)
            {
            	sb.append("cc [");
            	
            	InternetAddress[] ccAddress = new InternetAddress[emailObject.getCc().size()];
                
                for( int i = 0; i < emailObject.getCc().size(); i++ ) {
                    ccAddress[i] = new InternetAddress(emailObject.getCc().get(i));
                }

                for( int i = 0; i < ccAddress.length; i++) {
                    message.addRecipient(Message.RecipientType.CC, ccAddress[i]);
                    sb.append(ccAddress[i] + ",");
                }
                
                sb.deleteCharAt(sb.length()-1);
                sb.append("],");
            }
            
            if(emailObject.getBcc()!=null)
            {
            	sb.append("bcc [");
            	
            	InternetAddress[] bccAddress = new InternetAddress[emailObject.getCc().size()];
                
                for( int i = 0; i < emailObject.getCc().size(); i++ ) {
                    bccAddress[i] = new InternetAddress(emailObject.getCc().get(i));
                }

                for( int i = 0; i < bccAddress.length; i++) {
                    message.addRecipient(Message.RecipientType.BCC, bccAddress[i]);
                    sb.append(bccAddress[i] + ",");
                }
                
                sb.deleteCharAt(sb.length()-1);
                sb.append("]");
            }

            message.setFrom(new InternetAddress(propertyObject.getFrom())); 
            message.setSubject(emailObject.getSubject());  
            
            Multipart multipart = new MimeMultipart();
            setContent(emailObject.getContent(), multipart);

            if (emailObject.getAttachements() != null)
            {
                 List<String> attaches = emailObject.getAttachements();
                 for (String f:attaches)
                 {
                	 setAttachment(f, multipart);
                 }
                 
            }
            
            message.setContent(multipart);
            //message.setContent(emailObject.getContent(),"text/html;charset=utf-8");  
            message.setSentDate(new Date());
                        
            Transport.send(message);
            
            sb.insert(0, "Sent [" + emailObject.getSubject() + "]");
            
            logger.info(sb.toString());
            
            return true;
        } 
        catch (Exception e)
        {  
        	e.printStackTrace();
        	logger.error(e);
        	logger.error("fail to send email:"+e.getMessage());
        	return false;
        }
	}
	
	private void setContent(String content, Multipart multipart) throws MessagingException
	{
		 MimeBodyPart messageBodyPart = new MimeBodyPart(); 
	     messageBodyPart.setText(content, StandardCharsets.UTF_8.name(), "html");	     
	     multipart.addBodyPart(messageBodyPart); 
	}
	
	private void setAttachment(String attachmentName,  Multipart multipart) throws MessagingException
	{
		BodyPart attachPart = new MimeBodyPart();
        FileDataSource source = new FileDataSource(attachmentName);
        attachPart.setDataHandler(new DataHandler(source));
        attachPart.setFileName(source.getName());
        multipart.addBodyPart(attachPart);

    }
	
	
	private Session getSenderSession()
	{
        Properties properties = new Properties();
        properties.put("mail.smtp.host", propertyObject.getHost());
        properties.put("mail.smtp.port", propertyObject.getPort());
        properties.put("mail.store.protocol" , propertyObject.getProtocol());
        properties.put("mail.smtp.auth" , "true");
        properties.put("mail.smtp.ssl.enable", "true");
          
        Authenticator authenticator = new Authenticator() 
        {   
            protected PasswordAuthentication getPasswordAuthentication() 
            {
            	return new PasswordAuthentication(propertyObject.getFrom(), propertyObject.getPsswd());  
            }  
        };  
        Session session = Session.getDefaultInstance(properties,authenticator);  
        return session;  
    }
}
